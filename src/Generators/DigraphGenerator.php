<?php declare(strict_types=1);
/**
 * PHP version 8.1
 *
 * This source file is subject to the license that is bundled with this package in the file LICENSE.
 */

namespace PhUml\Generators;

use League\Pipeline\Pipeline;
use PhUml\Console\Commands\GeneratorInput;
use PhUml\Processors\OutputContent;
use PhUml\Stages\CreateDigraph;
use PhUml\Stages\FindCode;
use PhUml\Stages\ParseCode;
use PhUml\Stages\SaveFile;

/**
 * It generates a file with a digraph in DOT format that can be used to create a class diagram
 *
 * You might want to create a different output using either `neato` or `dot`.
 * The file this command creates can be used as an intermediate step.
 * For instance:
 *
 * `neato -Tpdf output.gv > output.pdf`
 *
 * Where `output.gv` is the file generated by this action
 */
final class DigraphGenerator
{
    public static function fromConfiguration(DigraphConfiguration $configuration): DigraphGenerator
    {
        return new self(
            new FindCode($configuration->codeFinder(), $configuration->display()),
            new ParseCode($configuration->codeParser(), $configuration->display()),
            new CreateDigraph($configuration->graphvizProcessor(), $configuration->display()),
            new SaveFile($configuration->writer(), $configuration->display()),
        );
    }

    private function __construct(
        private readonly FindCode $findCode,
        private readonly ParseCode $parseCode,
        private readonly CreateDigraph $createDigraph,
        private readonly SaveFile $saveFile,
    ) {
    }

    public function generate(GeneratorInput $input): void
    {
        $pipeline = (new Pipeline())
            ->pipe($this->findCode)
            ->pipe($this->parseCode)
            ->pipe($this->createDigraph)
            ->pipe(fn (OutputContent $content) => $this->saveFile->saveTo($content, $input->filePath()));

        $pipeline->process($input->codebaseDirectory());
    }
}
